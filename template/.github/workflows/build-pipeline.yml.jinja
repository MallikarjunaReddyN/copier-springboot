name: {{ project_name }} CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    name: Test - Units
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven
    - name: Build with Maven
      run: mvn compile test

  sonar:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Maven verify
        run: mvn -B clean verify
      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
          # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: "SonarQube Quality Gate Status"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          
  build:
    name: Build, Publish & Docker push
    runs-on: ubuntu-latest
    needs: [test, sonar]
    permissions:
      packages: write
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven
    - name: Publish artifact on GitHub Packages
      if: ${{github.ref == 'refs/heads/release'}}
      run: mvn -B clean deploy -DskipTests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Docker build & push
      run: mvn clean compile jib:build -Djib.to.auth.username=${{ secrets.DOCKER_USERNAME }} -Djib.to.auth.password=${{ secrets.DOCKER_PASSWORD }} -Djib.to.tags=${{ github.run_number }}

  update-manifest:
    name: Update Image tag in manifest file
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          repository: MallikarjunaReddyN/k8s-manifests
          ref: main
          token: ${{ secrets.WROKFLOW_TOKEN }}
      - name: setup git config
        run: |
          git config --global user.email "ciagent@gmail.com"
          git config --global user.name "CI Agent"
          echo ${{github.run_number}}
          sed -i 's#mallireddy1998.*#mallireddy1998/{{ project_slug }}:${{ github.run_number }}#g' services/{{ project_slug }}/demo-deployment.yaml
          git add .
          git commit -am "Update image for - ${{ github.run_number }}"
      - run: git push origin main


trigger:
  branches:
    include:
      - dev
      - main
      - features/*
      - releases/*

variables:
  - group: registery-credentials
  - name: isDev
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/dev')]
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: isRelease
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/release')]
  - name: tag
    value: '$(Build.BuildId)'
  - name: env
    {% raw %}${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:{% endraw %}
      value: Dev
    {% raw %}${{ if eq(variables['Build.SourceBranchName'], 'main') }}:{% endraw %}
      value: QA
    {% raw %}${{ if startsWith(variables['Build.SourceBranchName'], 'releases/release') }}:{% endraw %}
      value: Prod

stages:
  - stage: Build
    displayName: {% if docker == 'Yes' %}Unit Tests, Sonar Scan, Build & Docker push{% else %}Unit Tests, Sonar Scan & Build{% endif %}
    jobs:
    - job: Build
      displayName: {% if docker == 'Yes' %}Unit Tests, Sonar Scan, Build & Docker push{% else %}Unit Tests, Sonar Scan & Build{% endif %}
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: JavaToolInstaller@0
        displayName: 'Installing Java 17'
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      - task: Maven@4
        displayName: 'Test and Publish Test Results'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'clean package'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          testRunTitle: 'Unit Tests'
          codeCoverageToolOption: 'JaCoCo'
          classFilter: -:{{ group_id }}.{{ project_package }}.domain.*,-:{{ group_id }}.{{ project_package }}.config.*,-:{{ group_id }}.{{ project_package }}.repository.*,-:{{ group_id }}.{{ project_package }}.exception.*
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
          sqMavenPluginVersionChoice: 'latest'

      {% if sca == 'Yes' %}{% if sca_type == 'SonarQube' %}- task: SonarQubePrepare@5
        displayName: Sonar Scan
        inputs:
          SonarQube: 'sonarqube' # 'sonarqube' is service connection name
          scannerMode: 'CLI'
          configMode: 'file'
      - task: SonarQubeAnalyze@5
        inputs:
          jdkversion: 'JAVA_HOME_17_X64'
      - task: SonarQubePublish@5
        displayName: Sonar Publish
        inputs:
          pollingTimeoutSec: '300'{% endif %}
      {% if sca_type == 'SonarCloud' %}- task: SonarCloudPrepare@1
        displayName: Sonar Scan Prepare
        inputs:
          SonarCloud: 'sonarcloud' # 'sonarcloud' is service connection name
          organization: 'mallikarjunareddyn'
          scannerMode: 'CLI'
          configMode: 'file'
      
      - task: SonarCloudAnalyze@1
        displayName: Sonar Scan Analyze
        inputs:
          jdkversion: 'JAVA_HOME_17_X64'
      
      - task: SonarCloudPublish@1
        displayName: Sonar Publish
        inputs:
          pollingTimeoutSec: '300'{% endif %}{% endif %}

      {% if docker == 'Yes' %}- task: Maven@4
        condition: or(variables.isDev, variables.isMain ,variables.isRelease)
        displayName: Docker Build & Push
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'clean package -DskipTests jib:build -Djib.to.auth.username=$(REGISTRY_USERNAME) -Djib.to.auth.password=$(REGISTRY_PASSWORD) -Djib.to.tags=$(tag)'{% endif %}

      {% if aks == 'Yes' %}- upload: k8s
        condition: or(variables.isDev, variables.isMain ,variables.isRelease)
        displayName: Upload k8s manifests
        artifact: k8s
    
  - stage: Deploy
    displayName: AKS Deploy
    dependsOn: Build
    condition: and(succeeded(), or(variables.isDev, variables.isMain ,variables.isRelease))
    variables:
    - group: {% raw %}${{variables.env}}{% endraw %}
    jobs:
    - deployment: AKSDeploy
      displayName: AKS Deploy
      pool:
        vmImage: 'ubuntu-latest'
      environment: {% raw %}'${{variables.env}}.default'{% endraw %} # default is a namespace value change as per your requirement
      strategy:
        runOnce:
          deploy:
            steps:
            - task: replacetokens@3
              displayName: 'Replace Tokens'
              inputs:
                targetFiles: '$(Pipeline.Workspace)/k8s/*.yaml'
                tokenPrefix: '##'
                tokenSuffix: '##'

            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: deploy
                manifests: |
                  $(Pipeline.Workspace)/k8s/deployment.yaml
                  $(Pipeline.Workspace)/k8s/service.yaml
                  $(Pipeline.Workspace)/k8s/ingress.yaml
                containers: |
                  {% if container_registery == "DockerHub" %}$(REGISTRY_USERNAME){% else %}##YOUR_CONTAINER_REGISTRY##{% endif %}/{{ project_slug }}:$(tag){% endif %}

name: {{ project_name }} CI

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  test:
    name: Test - Units
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven
    - name: Build with Maven
      run: mvn compile test
{% if sonarqube == 'Yes' %}
  sonar:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Maven verify
        run: mvn -B clean verify
      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          SONAR_TOKEN: {% raw %}${{ secrets.SONAR_TOKEN }}{% endraw %}
          SONAR_HOST_URL: {% raw %}${{ secrets.SONAR_HOST_URL }}{% endraw %}
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
          # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: {% raw %}${{ secrets.SONAR_TOKEN }}{% endraw %}
      - name: "SonarQube Quality Gate Status"
        run: echo "The Quality Gate status is {% raw %}${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}{% endraw %}"
{% endif %}          
  build:
    {% if docker == 'Yes' %}name: Build, Publish & Docker push{% else %}name: Build & Publish{% endif %}
    runs-on: ubuntu-latest
    needs: [test{% if sonarqube == 'Yes' %}, sonar{% endif %}]
    permissions:
      packages: write
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven
        path: target/
    {% if docker == 'Yes' %}
    - name: Docker build & push
      run: mvn clean package -DskipTests jib:build -Djib.to.auth.username={% raw %}${{ secrets.DOCKER_USERNAME }}{% endraw %} -Djib.to.auth.password={% raw %}${{ secrets.DOCKER_PASSWORD }}{% endraw %} -Djib.to.tags={% raw %}${{ github.run_number }}{% endraw %}
    {% else %}
    - name: Maven build
      run: mvn clean package -DskipTests
    {% endif %}
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: k8s-manifests
        path: k8s/

  {% if aks == 'Yes' %}determine-environment:
    if: {% raw %}${{github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'releases/release')}}{% endraw %}
    runs-on: ubuntu-latest
    steps:
      - name: Select environment
        id: select-env
        run: |
          if [ "{% raw %}${{ github.ref }}{% endraw %}" == "refs/heads/dev" ]; then
            echo "development"
            echo "env=dev" >> "$GITHUB_OUTPUT"
          elif [ "{% raw %}${{ github.ref }}{% endraw %}" == "refs/heads/main" ]; then
            echo "qa"
            echo "env=qa" >> "$GITHUB_OUTPUT"
          elif [ {% raw %}${{ startsWith(github.ref, 'releases/release') }}{% endraw %} ]; then
            echo "production"
            echo "env=prod" >> "$GITHUB_OUTPUT"
          fi
    outputs:
      env: {% raw %}${{ steps.select-env.outputs.env }}{% endraw %}

  deploy:
    name: Deploy to AKS
    if: {% raw %}${{github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'releases/release')}}{% endraw %}
    runs-on: ubuntu-latest
    needs: [ build, determine-environment ]
    environment: {% raw %}${{ needs.determine-environment.outputs.env }}{% endraw %}
    steps:
      - uses: actions/checkout@v3
      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '##'
          tokenSuffix: '##'
          files: '["k8s/*.yaml"]'
        env:
          TAG: {% raw %}${{ github.run_number }}{% endraw %}
      - name: Azure login
        id: login
        uses: azure/login@v1.4.3
        with:
          creds: {% raw %}${{ secrets.AZURE_CREDENTIALS }}{% endraw %}
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: {% raw %}'${{ secrets.resource_group }}'{% endraw %}
          cluster-name: {% raw %}'${{ secrets.cluster_name }}'{% endraw %}
      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: {% raw %}'${{ needs.determine-environment.outputs.env }}'{% endraw %}
          manifests: |
            k8s/deployment.yaml
            k8s/service.yaml
            k8s/ingress.yaml{% endif %}
name: {{ project_name }} CI {% if aks == 'Yes' %}& CD{% endif %}

on:
  push:
    branches:
      - 'dev'
      - 'main'
      - 'releases/**'
      - 'features/**'
  workflow_dispatch:

jobs:
  build:
    name: Units Test, Sonar Scan and Docker build & push
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'corretto'
        {% if project == 'Maven' %}cache: maven{% endif %}
    - name: change permissions
      run: {% if project == 'Maven' %}chmod 777 ./mvnw{% endif %}{% if project == 'Gradle' %}chmod 777 ./gradlew{% endif %}
    - name: Test & Build
      run: {% if project == 'Maven' %}./mvnw clean package{% endif %}{% if project == 'Gradle' %}./gradlew clean build{% endif %}
    {%- if sca == 'Yes' %}
    - name: SonarCloud Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
        SONAR_TOKEN: {% raw %}${{ secrets.SONAR_TOKEN }}{% endraw %}
        SONAR_HOST_URL: {% raw %}${{ secrets.SONAR_HOST_URL }}{% endraw %}
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
        SONAR_TOKEN: {% raw %}${{ secrets.SONAR_TOKEN }}{% endraw %}
    - name: SonarQube Quality Gate Status
      run: echo "The Quality Gate status is {% raw %}${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}{% endraw %}"{% endif %} 
    {% if docker == 'Yes' %}- {% if docker == 'Yes' %}name: Build, Publish & Docker push{% else %}name: Build & Publish{% endif %}
      run: {% if project == 'Maven' %}./mvnw clean package -DskipTests jib:build{% endif %}{% if project == 'Gradle' %}./gradlew jib{% endif %} -Djib.to.auth.username={% raw %}${{ secrets.REGISTRY_USERNAME }}{% endraw %} -Djib.to.auth.password={% raw %}${{ secrets.REGISTRY_PASSWORD }}{% endraw %} -Djib.to.tags={% raw %}${{ github.run_number }}{% endraw %}
    {%- endif %}
    {%- if aks == 'Yes' %}
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: k8s-manifests
        path: k8s/
  
  determine-environment:
    name: Determine environment
    if: {% raw %}${{github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'releases/release')}}{% endraw %}
    runs-on: ubuntu-latest
    steps:
      - name: Select environment
        id: select-env
        run: |
          if [ "{% raw %}${{ github.ref }}{% endraw %}" == "refs/heads/dev" ]; then
            echo "development"
            echo "env=dev" >> "$GITHUB_OUTPUT"
          elif [ "{% raw %}${{ github.ref }}{% endraw %}" == "refs/heads/main" ]; then
            echo "qa"
            echo "env=qa" >> "$GITHUB_OUTPUT"
          elif [ {% raw %}${{ startsWith(github.ref, 'releases/release') }}{% endraw %} ]; then
            echo "production"
            echo "env=prod" >> "$GITHUB_OUTPUT"
          fi
    outputs:
      env: {% raw %}${{ steps.select-env.outputs.env }}{% endraw %}

  deploy:
    name: Deploy to AKS
    if: {% raw %}${{github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'releases/release')}}{% endraw %}
    runs-on: ubuntu-latest
    needs: [ build, determine-environment ]
    environment: {% raw %}${{ needs.determine-environment.outputs.env }}{% endraw %}
    steps:
      - uses: actions/checkout@v3
      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '##'
          tokenSuffix: '##'
          files: '["k8s/*.yaml"]'
        env:
          TAG: {% raw %}${{ github.run_number }}{% endraw %}
          REGISTRY_USERNAME: {% raw %}${{ secrets.DOCKER_USERNAME }}{% endraw %}
          DOMAIN: {% raw %}${{ vars.DOMAIN }}{% endraw %}
          {% if is_db_required == 'Yes' %}DATABASE_URL: {% raw %}${{ vars.DATABASE_URL }}{% endraw %}
          DATABASE_USERNAME: {% raw %}${{ vars.DATABASE_USERNAME }}{% endraw %}
          DATABASE_PASSWORD: {% raw %}${{ secrets.DATABASE_PASSWORD }}{% endraw %}{% endif %}
      - name: Azure login
        id: login
        uses: azure/login@v1
        with:
          creds: {% raw %}${{ secrets.AZURE_CREDENTIALS }}{% endraw %}
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: {% raw %}'${{ secrets.resource_group }}'{% endraw %}
          cluster-name: {% raw %}'${{ secrets.cluster_name }}'{% endraw %}
      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
      {%- if container_registery == "DockerHub" %}
      - name: Create ImagePullSecret
        uses: Azure/k8s-create-secret@v4
        with:
          container-registry-url: registry.hub.docker.com
          container-registry-username: {% raw %}${{ secrets.REGISTRY_USERNAME }}{% endraw %}
          container-registry-password: {% raw %}${{ secrets.REGISTRY_PASSWORD }}{% endraw %}
          secret-name: image-pull-secret
      {%- endif %}
      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: {% raw %}'${{ vars.namespace }}'{% endraw %}
          manifests: |
            {%- if is_db_required == 'Yes' %}
            k8s/secrets.yaml
            {%- endif %}
            k8s/deployment.yaml
            k8s/service.yaml
            k8s/ingress.yaml
          {%- if container_registery == "DockerHub" %}
          imagepullsecrets: |
            image-pull-secret
          {%- endif %}
      {%- endif %}